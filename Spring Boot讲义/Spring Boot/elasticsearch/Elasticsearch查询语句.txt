1 基本操作：
	1.1 创建索引
		格式: PUT /索引名称
		举例: PUT /db_index

	1.2 查询索引
		格式: GET /索引名称
		举例: GET /db_index
		
	1.3 删除索引
		格式: DELETE /索引名称
		举例: DELETE /db_index		

	1.4 添加文档 
		格式: PUT /索引名称/类型/id
		举例: 
			PUT /db_index/user/1
			{
				"name": "Jack",
				"sex": 1,
				"age": 25,
				"book": "Spring Boot 入门到精通",
				"remark": "hello world"
			}
			
			PUT /db_index/user/2
			{
				"name": "Tom",
				"sex": 1,
				"age": 28,
				"book": "Spring Cloud 入门到精通",
				"remark": "hello java",
				"test": "add field"
			}
			
			PUT /db_index/user/3
			{
				"name": "Lily",
				"sex": 0,
				"age": 26,
				"book": "Hadoop 权威指南",
				"remark": "hello hadoop"
			}
			
			PUT /db_index/user/4
			{
				"name": "Colin",
				"sex": 0,
				"age": 22,
				"book": "Hadoop 技术内幕",
				"remark": "What is the hadoop"
			}
			
			PUT /db_index/user/5
			{
				"name": "Tobin",
				"sex": 0,
				"age": 19,
				"book": "Hadoop 入门到精通",
				"remark": "What is the hadoop"
			}			
			
	1.5 修改文档 
		格式: PUT /索引名称/类型/id
		举例: 
			PUT /db_index/user/1
			{
				"name": "JackTEST",
				"sex": 1,
				"age": 25,
				"book": "Spring Boot 入门到精通",
				"remark": "hello world"				
			}
			
	1.6 查询文档
		格式: GET /索引名称/类型/id
		举例: GET /db_index/user/1

	1.7 删除文档
		格式: DELETE /索引名称/类型/id
		举例: DELETE /db_index/user/1

2 查询操作
	2.1 查询当前类型中的所有文档 _search 
		格式: GET /索引名称/类型/_search
		举例: GET /db_index/user/_search
		SQL:  select * from user

	2.2 条件查询, 如要查询age等于28岁的 _search?q=*:***
		格式: GET /索引名称/类型/_search?q=*:***
		举例: GET /db_index/user/_search?q=age:28
		SQL:  select * from user where age = 28
		
	2.3 范围查询, 如要查询age在25至26岁之间的 _search?q=***[** TO **]  注意: TO 必须为大写
		格式: GET /索引名称/类型/_search?q=***[25 TO 26]
		举例: GET /db_index/user/_search?q=age[25 TO 26]
		SQL:  select * from user where age between 25 and 26
				
	2.4 根据多个ID进行批量查询 _mget
		格式: GET /索引名称/类型/_mget
		举例: GET /db_index/user/_mget
			  {
				  "ids":["1","2"]  
			  }
		SQL:  select * from user where id in (1,2)		
		
	2.5 查询年龄小于等于28岁的 :<=
		格式: GET /索引名称/类型/_search?q=age:<=**
		举例: GET /db_index/user/_search?q=age:<=28
		SQL:  select * from user where age <= 28
		
	2.6	查询年龄大于28前的 :>
		格式: GET /索引名称/类型/_search?q=age:>**
		举例: GET /db_index/user/_search?q=age:>28
		SQL:  select * from user where age > 28

	2.7 分页查询 from=*&size=*
		格式: GET /索引名称/类型/_search?q=age[25 TO 26]&from=0&size=1
		举例: GET /db_index/user/_search?q=age[25 TO 26]&from=0&size=1
		SQL:  select * from user where age between 25 and 26 limit 0, 1 
		
	2.8 对查询结果只输出某些字段 _source=字段,字段
		格式: GET /索引名称/类型/_search?_source=字段,字段
		举例: GET /db_index/user/_search?_source=name,age
		SQL:  select name,age from user

	2.9 对查询结果排序 sort=字段:desc/asc
		格式: GET /索引名称/类型/_search?sort=字段 desc
		举例: GET /db_index/user/_search?sort=age:desc
		SQL:  select * from user order by age desc
		
	2.10 多索引和多类别查询
		参考: https://es.xiaoleilu.com/050_Search/10_Multi_index_multi_type.htmls
		
		在所有索引的所有类型中搜索
		/_search
		
		在索引gb的所有类型中搜索
		/gb/_search
		
		在索引gb和us的所有类型中搜索
		/gb,us/_search

		在以g或u开头的索引的所有类型中搜索
		/g*,u*/_search

		在索引gb的类型user中搜索
		/gb/user/_search
		
		在索引gb和us的类型为user和tweet中搜索
		/gb,us/user,tweet/_search
		
	
3 DSL语言高级查询	
	ES提供了强大的查询语言（DSL），它可以允许我们进行更加强大、复杂的查询
	Elasticsearch DSL中有Query与Filter两种
	
	3.1 Query方式查询，会在ES中索引的数据都会存储一个_score分值，分值越高就代表越匹配。另外关于某个搜索的分值计算还是很复杂的，因此也需要一定的时间。
	
		3.1.1 根据名称精确查询姓名 term, term查询不会对字段进行分词查询，会采用精确匹配 
			注意: 采用term精确查询, 查询字段映射类型属于为keyword.
			举例: 
			POST /db_index/user/_search
			{
				"query": {
					"term": {
						"name": "Jack"
					}
				}
			}
			SQL: select * from user where name = 'Jack'

		3.1.2 根据备注信息模糊查询 match, match会根据该字段的分词器，进行分词查询 
			举例: 
			POST /db_index/user/_search
			{
				"from": 0,
				"size": 2, 
				"query": {
					"match": {
						"book": "Spring"
					}
				}
			}
			SQL: select * from user where book like '%Spring%' limit 0, 2
			
		3.1.3 多字段模糊匹配查询与精准查询 multi_match
			POST /db_index/user/_search
			{
				"query":{
					"multi_match":{
						"query":"Spring Hadoop",
						"fields":["book","remark"]
					}
				}
			}
			SQL: select * from user 
				 where book like '%Spring%' or book like '%Hadoop%' or remark like '%Spring%' or remark like '%Hadoop%'
			
		3.1.4 未指定字段条件查询 query_string , 含 AND 与 OR 条件
			POST /db_index/user/_search
			{
				"query":{
					"query_string":{
						"query":"(Spring Cloud AND 入门到精通) OR Spring Boot"
					}
				}
			}

		3.1.5 指定字段条件查询 query_string , 含 AND 与 OR 条件
			POST /db_index/user/_search
			{
				"query":{
					"query_string":{
						"query":"Spring Boot OR 入门到精通",
						"fields":["book","remark"]
					}
				}
			}
		
		3.1.6 范围查询
			注：json请求字符串中部分字段的含义
			　　range：范围关键字
			　　gte 大于等于
			　　lte  小于等于
			　　gt 大于
			　　lt 小于
			　　now 当前时间
			
			POST /db_index/user/_search
			{
				"query" : {
					"range" : {
						"age" : {
							"gte":25,
							"lte":28
						}
					}
				}
			}
			SQL: select * from user where age between 25 and 28
			
		3.1.7 分页、输出字段、排序综合查询
			POST /db_index/user/_search
			{
				"query" : {
					"range" : {
						"age" : {
							"gte":25,
							"lte":28
						}
					}
				},
				"from": 0,
				"size": 2,
				"_source": ["name", "age", "book"],
				"sort": {"age":"desc"}
			}
	
	3.2 Filter过滤器方式查询，它的查询不会计算相关性分值，也不会对结果进行排序, 因此效率会高一点，查询的结果可以被缓存。	
		
		3.2.1 Filter Context 对数据进行过滤 
			POST /db_index/user/_search
			{
				"query" : {
					"bool" : {
						"filter" : {
							"term":{
								"age":25
							}
						}
					}
				}
			}		
		

4 文档映射 
	4.1 动态映射
		4.1.1 删除原创建的索引
			DELETE /db_index
			
		4.1.2 创建索引
			PUT /db_index

		4.1.3 创建文档(ES根据数据类型, 会自动创建映射)
			PUT /db_index/user/1
			{
				"name": "Jack",
				"sex": 1,
				"age": 25,
				"book": "Spring Boot 入门到精通",
				"remark": "hello world"
			}
			
		4.1.4 获取文档映射
			GET /db_index/user/_mapping			
		
	4.2 静态映射				
		4.2.1 删除原创建的索引
			DELETE /db_index
			
		4.3.2 创建索引
			PUT /db_index
					
		4.2.3 设置文档映射
			POST /db_index/_mapping/user
			{
				"user":{
					"properties":{
					   "name":{
							 "type":"keyword"
					   },
					   "sex":{
							"type":"integer"
					   },
					   "age":{
							"type":"integer"
					   },
					   "book":{
							"type":"text"
					   },
					   "remark":{
							"type":"text"
					   },
					   "test":{
							"type":"keyword"
					   }
					}
				}
			}	
	
		4.2.4 根据静态映射创建文档
			PUT /db_index/user/1
			{
				"name": "Jack",
				"sex": 1,
				"age": 25,
				"book": "Spring Boot 入门到精通",
				"remark": "hello world"
			}
			
		4.2.5 获取文档映射
			GET /db_index/user/_mapping				
			
	4.3 对已存在的mapping映射进行修改	
		* 如果要推倒现有的映射, 你得重新建立一个静态索引
		
		* 然后把之前索引里的数据导入到新的索引里
		* 删除原创建的索引
		* 为新索引起个别名, 为原索引名
		
		POST _reindex
		{
		  "source": {
			"index": "db_index"
		  },
		  "dest": {
			"index": "db_index_2"
		  }
		}
		
		DELETE /db_index
		
		PUT /db_index_2/_alias/db_index
		
	4.4 keyword 与 text 映射类型的区别， 以 book 字段为例
		* 将 book 字段设置为 keyword 映射 （只能精准查询, 不能分词查询，能聚合、排序）
			POST /db_index/user/_search
			{
				"query": {
					"term": {
						"book": "Hadoop 入门到精通"
					}
				}
			}
			
		* 将 book 字段设置为 text 映射	（能模糊查询, 能分词查询，不能聚合、排序）
			POST /db_index/user/_search
			{
				"from": 0,
				"size": 2, 
				"query": {
					"match": {
						"book": "Hadoop"
					}
				}
			}
			
			
5 乐观并发控制
	5.1 再以创建一个文档为例
		PUT /db_index/user/1
		{
			"name": "Jack",
			"sex": 1,
			"age": 25,
			"book": "Spring Boot 入门到精通",
			"remark": "hello world"
		}
	
	5.2	实现_version乐观锁更新文档
		PUT /db_index/user/1?version=1
		{
			"name": "Jack",
			"sex": 1,
			"age": 25,
			"book": "Spring Boot 入门到精通",
			"remark": "hello world"
		}
			
			
			

6 IK中文分词器
	6.1 分析分词
		GET _analyze
		{
			"analyzer": "ik_smart",
			"text": "我爱中国"
		}
	
	
流浪地球
疯狂的外星人
我爱中国
		

7 创建静态映射时指定text类型的ik分词器
	7.1 设置ik分词器的文档映射
		* 先删除之前的db_index
		* 再创建新的db_index
		* 定义ik_smart的映射
		POST /db_index/_mapping/user
		{
			"user":{
				"properties":{
				   "name":{
						 "type":"keyword"
				   },
				   "sex":{
						"type":"integer"
				   },
				   "age":{
						"type":"integer"
				   },
				   "book":{
						"type":"text",
						"analyzer":"ik_smart",
						"search_analyzer":"ik_smart"
				   },
				   "remark":{
						"type":"text"
				   },
				   "test":{
						"type":"keyword"
				   }
				}
			}
		}	
		* PUT前面的5条数据
		* 分词查询
		POST /db_index/user/_search
		{ 
			"query": {
				"match": {
					"book": "入"
				}
			}
		}	
		
		POST /db_index/user/_search
		{ 
			"query": {
				"match": {
					"book": "入门"
				}
			}
		}				

		
			
			
			
			
			
			
			
	
	
	
	
	
	


https://www.cnblogs.com/liuxiaoming123/p/8124969.html
https://blog.csdn.net/qwqw3333333/article/details/78255996
https://blog.csdn.net/laoyang360/article/details/80468757




